#!/usr/bin/env ruby1.8

require "rubygems"
require "term/ansicolor"

String.send(:include, Term::ANSIColor)

@branch = File.basename(Dir.pwd)
@path = Dir.pwd
@project = File.dirname(Dir.pwd)
ruby = "ruby1.8"

# dytrych vs. botablog.cz
@env = @project.match(/\./) && @branch.eql?("master") ? "production" : "development"

puts "config/database.yml ...".blue.bold
File.open("config/database.yml", "w") do |file|
  if @env == "production"
  file.puts <<EOF
---
production: &defaults
  adapter:  sqlite3
  database: production.db
EOF
  elsif @env == "development"
  file.puts <<EOF
---
development: &defaults
  adapter:  sqlite3
  database: development.db
EOF
  end
end

# TODO: what if config.ru already exist?
puts "Writing config.ru ...".blue.bold
file = File.open("config.ru", "w")

file.puts <<EOF
#!/usr/bin/env #{ruby}

ENV["MERB_ENV"] = "#@env"

begin
  require 'minigems'
rescue LoadError
  require 'rubygems'
end
 
if File.directory?(gems_dir = File.join(Dir.pwd, 'gems')) ||
   File.directory?(gems_dir = File.join(File.dirname(__FILE__), '..', 'gems'))
  $BUNDLE = true; Gem.clear_paths; Gem.path.unshift(gems_dir)
end
 
require 'merb-core'
 
Merb::Config.setup(:merb_root => ".",
                   :environment => ENV['RACK_ENV'])
Merb.environment = Merb::Config[:environment]
Merb.root = Merb::Config[:merb_root]
Merb::BootLoader.run
 
run Merb::Rack::Application.new
EOF

file.close
system("chmod +x '#{file.path}'")

if @env == "production"
  puts "Symlinking database into #{ENV['BACKUPDIR']}/database/#{File.basename(@project)}.db ...".blue.bold
  system("ln -s #{Dir.pwd}/production.db #{ENV['BACKUPDIR']}/database/#{File.basename(@project)}.db")
  if File.directory?("media/uploads")
    puts "Symlinking uploads into #{ENV['BACKUPDIR']}/uploads/#{File.basename(@project)} ...".blue.bold
    system("ln -s #{Dir.pwd}/media/uploads/ #{ENV['BACKUPDIR']}/uploads/#{File.basename(@project)}")
  end
end
