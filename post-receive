#!/bin/bash

# POST-RECEIVE HOOK
# ARGV: empty
# STDIN: [OLD HEAD] [NEW HEAD] refs/heads/alpha
set -- $(cat /dev/stdin)

old=$1 && new=$2 && ref=$3
branch=$(basename $ref)

# POST-UPDATE HOOK
# ARGV: $1 is branch
# STDIN: ?
#branch=$(basename $1)

cd ..
root=`pwd`

# GIT_DIR is "." which should points to bare repozitory
GIT_DIR="`pwd`/$branch/.git"

# colors
red()  { echo -e "\e[1;31m$*\e[0m"; }
blue() { echo -e "\e[1;34m$*\e[0m"; }

if [ -d "$branch" ] ; then
  cd $branch
  blue "Updating $branch in `pwd` ... (from $old' to '$new')"
  git pull
else
  blue "Cloning $branch to $(pwd)/$branch (HEAD: '$new') ..."
  git clone repo.git $branch
  cd $branch
  git checkout $branch
  blue "Creating logs ..."
  mkdir log 2> /dev/null
  touch log/apache.log 2> /dev/null
  # global hooks
  # /webs/static/hooks/update
  if [ -x "../support/hooks/clone" ] ; then
    blue "Runnings global clone hook"
    ../support/hooks/clone
  fi
fi

# vhosts
vhost="$root/vhosts/$branch.vhost"
vhostgen="$root/../support/tools/vhost-gen"
if ! [ -f "$vhost" ] ; then
  red "Creating vhost file in $vhost ..."
  mkdir $(dirname $vhost)
  if [ -x "$vhostgen" ] ; then
    $vhostgen $root $branch > $vhost
  else
    vhost-gen.rb $root $branch.$(basename $root) > $vhost
  fi
  red "You should setup data sources. Possibilities are:"
  red "  - symlink production database: just if db structure is same"
  red "  - copy production database: just if db structure is same"
  red "  - use fixtures: in another cases"
fi

# HOOKS
# Run first found hook

# local hooks
if [ -x "support/hooks/update" ] ; then
  blue "Runnings project's update hook"
  exec support/hooks/update
fi

# global hooks
# /webs/static/hooks/update
if [ -x "../support/hooks/update" ] ; then
  blue "Runnings global update hook"
  exec ../support/hooks/update
fi
