h1. About

This is simple and flexible deployment solution based on Git post-receive hook.

* You don't have to install anything on your server
* It works with whichever thinkable solution, Rails, Merb, "Rango":http://github.com/botanicus/rango, Sinatra or even Django or static pages, it just doesn't matter!
* It's easy and transparent

The obvious limitation of this approach is that you can't deploy to multiple servers at one time. Well, due to Git's distributed nature it would be easy to do so, but you would have to do @git push server1 master && git push server2 master@ or write your custom script.

h1. Usage

# Run @gem install git-deployer --development@
# Add @load "git-deployer.nake"@ to your file with "Nake":http://github.com/botanicus/nake tasks
# Install hooks via @./tasks.rb deployer:install@
# Edit @hooks/clone@ and @hooks/update@
# Install post-receive hook and create necessary directories via @./tasks.rb deployer:install@
# Push your changes via @git push origin master@

That's it. When you run @git push origin master@ for the first time, it should found that given branch isn't cloned yet, so it should

h1. Customization

It was pretty easy, was it? But what if I want ...

h2. Restricting Just for @deploy@ Branch

You might not want to deploy every branch you push to origin.

h1. FAQ

# I had typo in my hooks, so it failed during deploy, how can I rerun it?

@./tasks.rb deployer:run@

# You are using "Nake":http://github.com/botanicus/nake, but everyone's using Rake. Is there any chance that you will support Rake in future?

The trouble with Rake is that Rake doesn't support configuration and it also really suck in command-line parsing. If Rake will support at least the command line arguments in a reasonable way, I can think about it.
